/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ZenVoltInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "drivers"
      | "registerDriver"
      | "sendReward"
      | "vBetterToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DriverRegistered" | "RewardSent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "drivers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerDriver",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vBetterToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "drivers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDriver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vBetterToken",
    data: BytesLike
  ): Result;
}

export namespace DriverRegisteredEvent {
  export type InputTuple = [
    driverAddress: AddressLike,
    name: string,
    licenseNo: string
  ];
  export type OutputTuple = [
    driverAddress: string,
    name: string,
    licenseNo: string
  ];
  export interface OutputObject {
    driverAddress: string;
    name: string;
    licenseNo: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardSentEvent {
  export type InputTuple = [
    driverAddress: AddressLike,
    rewardAmount: BigNumberish
  ];
  export type OutputTuple = [driverAddress: string, rewardAmount: bigint];
  export interface OutputObject {
    driverAddress: string;
    rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZenVolt extends BaseContract {
  connect(runner?: ContractRunner | null): ZenVolt;
  waitForDeployment(): Promise<this>;

  interface: ZenVoltInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  drivers: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint] & {
        name: string;
        licenseNo: string;
        rewardBalance: bigint;
      }
    ],
    "view"
  >;

  registerDriver: TypedContractMethod<
    [_name: string, _licenseNo: string],
    [void],
    "nonpayable"
  >;

  sendReward: TypedContractMethod<
    [_rewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  vBetterToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "drivers"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint] & {
        name: string;
        licenseNo: string;
        rewardBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerDriver"
  ): TypedContractMethod<
    [_name: string, _licenseNo: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendReward"
  ): TypedContractMethod<[_rewardAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vBetterToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DriverRegistered"
  ): TypedContractEvent<
    DriverRegisteredEvent.InputTuple,
    DriverRegisteredEvent.OutputTuple,
    DriverRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RewardSent"
  ): TypedContractEvent<
    RewardSentEvent.InputTuple,
    RewardSentEvent.OutputTuple,
    RewardSentEvent.OutputObject
  >;

  filters: {
    "DriverRegistered(address,string,string)": TypedContractEvent<
      DriverRegisteredEvent.InputTuple,
      DriverRegisteredEvent.OutputTuple,
      DriverRegisteredEvent.OutputObject
    >;
    DriverRegistered: TypedContractEvent<
      DriverRegisteredEvent.InputTuple,
      DriverRegisteredEvent.OutputTuple,
      DriverRegisteredEvent.OutputObject
    >;

    "RewardSent(address,uint256)": TypedContractEvent<
      RewardSentEvent.InputTuple,
      RewardSentEvent.OutputTuple,
      RewardSentEvent.OutputObject
    >;
    RewardSent: TypedContractEvent<
      RewardSentEvent.InputTuple,
      RewardSentEvent.OutputTuple,
      RewardSentEvent.OutputObject
    >;
  };
}
